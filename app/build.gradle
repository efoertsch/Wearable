apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.fisincorporated.wearable"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
}

// to pick up mock xml responses
//http://stackoverflow.com/questions/37221590/how-do-i-access-a-text-file-for-junit-test-in-android
// to share test classes/files
//http://blog.danlew.net/2015/11/02/sharing-code-between-unit-tests-and-instrumentation-tests-on-android/
android.sourceSets {
    String sharedTestJava = 'src/sharedTest/java'
    String sharedTestResources = 'src/sharedTest/resources'
    test {
        java.srcDirs += sharedTestJava
        resources.srcDirs += sharedTestResources
    }
    androidTest {
        java.srcDirs += sharedTestJava
        resources.srcDirs += sharedTestResources
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Wear
    compile "com.google.android.support:wearable:${rootProject.ext.wearableVersion}"
    provided "com.google.android.wearable:wearable:${rootProject.ext.wearableVersion}"
    compile "com.google.android.gms:play-services-wearable:${rootProject.ext.playServicesWearableVersion}"

    // Firebase notifications
    compile "com.google.firebase:firebase-messaging:${rootProject.ext.firebaseMessagingVersion}"

    compile "com.android.support:support-annotations:${rootProject.ext.androidSupportVersion}"

    // For Dagger2
    compile "com.google.dagger:dagger:${rootProject.ext.daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.ext.daggerVersion}"


    //Retrofit
    compile "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofitVersion}"
    compile "com.squareup.retrofit2:adapter-rxjava2:${rootProject.ext.retrofitVersion}"
    compile "com.google.code.gson:gson:${rootProject.ext.gsonVersion}"
    compile "com.squareup.retrofit2:converter-gson:${rootProject.ext.converterGsonVersion}"

    //okhttp
    compile "com.squareup.okhttp3:okhttp:${rootProject.ext.okHttpVersion}"


    // JVM Unit Testing
    testCompile("junit:junit:${rootProject.ext.junitVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    testCompile "org.mockito:mockito-core:${rootProject.ext.mockitoCoreVersion}"


    //Android testing
    androidTestCompile "com.android.support.test.espresso:espresso-core:${rootProject.ext.espressoVersion}"
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:${rootProject.ext.espressoVersion}"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:${rootProject.ext.espressoVersion}"

    androidTestCompile("com.android.support.test:runner:${rootProject.ext.testRunnerVersion}") {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile "com.android.support.test:rules:${rootProject.ext.testRunnerVersion}"
    // Matchers
    androidTestCompile "org.hamcrest:hamcrest-library:${rootProject.ext.hamcrestLibraryVersion}"

    //UI testing with UI Automator
    androidTestCompile "com.android.support.test.uiautomator:uiautomator-v18:${rootProject.ext.uiAutomatorVersion}"
    // Due to conflict in app compile
    androidTestCompile "com.android.support:support-annotations:${rootProject.ext.androidSupportVersion}"
    androidTestCompile "com.android.support:support-v4:${rootProject.ext.androidSupportVersion}"
    androidTestCompile "com.android.support:design:${rootProject.ext.androidSupportVersion}"


}
// For Firebase
apply plugin: 'com.google.gms.google-services'